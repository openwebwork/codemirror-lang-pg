# double quoted strings

"variable: $var";
"array access: $a[1]";
"deref array access: $a->[1] $a->[-1] $b->[1][1] $c->[1]->[1]";
"hash access: $var{b}";
"deref hash access: $var->{b} $var2->{a}{b} $var3->{a}->{b}";
"mixed deref hash and array access: $var1->{a}[1] $var2->{a}->[1] $var3->[1]{a} $var4->[1]->{a}";
"dereferenced scalar reference ${~~($a + 2)}";
"dereferenced arary reference @{['a' . 'b']}";
"interpolated package variable $Foo::Package::var";

==>

Program(
    ExpressionStatement(StringDoubleQuoted(InterpolatedStringContent, ScalarVariable), StatementEnd(";")),
    ExpressionStatement(
        StringDoubleQuoted(InterpolatedStringContent, ArrayAccessVariable(ScalarVariable, "[", Integer, "]")),
        StatementEnd(";")
    ),
    ExpressionStatement(
        StringDoubleQuoted(
            InterpolatedStringContent,
            ArrayAccessVariable(ScalarVariable, ArrowOperator, "[", Integer, "]"),
            InterpolatedStringContent,
            ArrayAccessVariable(ScalarVariable, ArrowOperator, "[", ArithOp, Integer, "]"),
            InterpolatedStringContent,
            ArrayAccessVariable(
                ArrayAccessVariable(ScalarVariable, ArrowOperator, "[", Integer, "]"),
                "[",
                Integer,
                "]"
            ),
            InterpolatedStringContent,
            ArrayAccessVariable(
                ArrayAccessVariable(ScalarVariable, ArrowOperator, "[", Integer, "]"),
                ArrowOperator,
                "[",
                Integer,
                "]"
            )
        ),
        StatementEnd(";")
    ),
    ExpressionStatement(
        StringDoubleQuoted(InterpolatedStringContent, HashAccessVariable(ScalarVariable, "{", Identifier, "}")),
        StatementEnd(";")
    ),
    ExpressionStatement(
        StringDoubleQuoted(
            InterpolatedStringContent,
            HashAccessVariable(ScalarVariable, ArrowOperator, "{", Identifier, "}"),
            InterpolatedStringContent,
            HashAccessVariable(
                HashAccessVariable(ScalarVariable, ArrowOperator, "{", Identifier, "}"),
                "{",
                Identifier,
                "}"
            ),
            InterpolatedStringContent,
            HashAccessVariable(
                HashAccessVariable(ScalarVariable, ArrowOperator, "{", Identifier, "}"),
                ArrowOperator,
                "{",
                Identifier,
                "}"
            )
        ),
        StatementEnd(";")
    ),
    ExpressionStatement(
        StringDoubleQuoted(
            InterpolatedStringContent,
            ArrayAccessVariable(
                HashAccessVariable(ScalarVariable, ArrowOperator, "{", Identifier, "}"),
                "[",
                Integer,
                "]"
            ),
            InterpolatedStringContent,
            ArrayAccessVariable(
                HashAccessVariable(ScalarVariable, ArrowOperator, "{", Identifier, "}"),
                ArrowOperator,
                "[",
                Integer,
                "]"
            ),
            InterpolatedStringContent,
            HashAccessVariable(
                ArrayAccessVariable(ScalarVariable, ArrowOperator, "[", Integer, "]"),
                "{",
                Identifier,
                "}"
            ),
            InterpolatedStringContent,
            HashAccessVariable(
                ArrayAccessVariable(ScalarVariable, ArrowOperator, "[", Integer, "]"),
                ArrowOperator,
                "{",
                Identifier,
                "}"
            )
        ),
        StatementEnd(";")
    ),
    ExpressionStatement(
        StringDoubleQuoted(
            InterpolatedStringContent,
            ScalarDereference(
                "$",
                "{",
                UnaryExpression(RefOp, List("(", BinaryExpression(ScalarVariable, ArithOp, Integer), ")")),
                "}"
            )
        ),
        StatementEnd(";")
    ),
    ExpressionStatement(
        StringDoubleQuoted(
            InterpolatedStringContent,
            ArrayDereference(
                "@",
                "{",
                ArrayRef("[", BinaryExpression(StringSingleQuoted, ConcatOp, StringSingleQuoted), "]"),
                "}"
            )
        ),
        StatementEnd(";")
    ),
    ExpressionStatement(
        StringDoubleQuoted(
            InterpolatedStringContent,
            PackageVariable(PackageName(ScalarVariable, "::", Identifier), "::", PackageVariableName(Identifier))
        ),
        StatementEnd(";")
    )
)

# q quoted strings

q/abc/;
q!a b c!;
q abcda;
q(ab(cd(ef)));
q/a b~~/c d/;
q # this is a comment
    # this is another comment
    (abc);
q{};

==>

Program(
    ExpressionStatement(
        StringQQuoted(q, QuoteLikeStartDelimiter, StringContent, QuoteLikeEndDelimiter),
        StatementEnd(";")
    ),
    ExpressionStatement(
        StringQQuoted(q, QuoteLikeStartDelimiter, StringContent, QuoteLikeEndDelimiter),
        StatementEnd(";")
    ),
    ExpressionStatement(
        StringQQuoted(q, QuoteLikeStartDelimiter, StringContent, QuoteLikeEndDelimiter),
        StatementEnd(";")
    ),
    ExpressionStatement(
        StringQQuoted(q, QuoteLikeStartDelimiter, StringContent, QuoteLikeEndDelimiter),
        StatementEnd(";")
    ),
    ExpressionStatement(
        StringQQuoted(q, QuoteLikeStartDelimiter, StringContent, QuoteLikeEndDelimiter),
        StatementEnd(";")
    ),
    ExpressionStatement(
        StringQQuoted(q, Comment, Comment, QuoteLikeStartDelimiter, StringContent, QuoteLikeEndDelimiter),
        StatementEnd(";")
    ),
    ExpressionStatement(StringQQuoted(q, QuoteLikeStartDelimiter, QuoteLikeEndDelimiter), StatementEnd(";"))
)

# qq quoted strings

qq/variable: $var/;
qq{array access: $a[1]};
qq!deref array access: $a->[-1]!;
qq/hash access: $var{b}/;
qq[deref hash access: $var->{b};];
qq<dereferenced scalar reference ${~~($a + 2)}>;
qq(dereferenced array reference @{['a' . 'b']});
qq[ab[c]d];
qq # Comment
    # another Comment
    (content $var more);
qq{};

==>

Program(
    ExpressionStatement(
        StringQqQuoted(qq, QuoteLikeStartDelimiter, InterpolatedStringContent, ScalarVariable, QuoteLikeEndDelimiter),
        StatementEnd(";")
    ),
    ExpressionStatement(
        StringQqQuoted(
            qq,
            QuoteLikeStartDelimiter,
            InterpolatedStringContent,
            ArrayAccessVariable(ScalarVariable, "[", Integer, "]"),
            QuoteLikeEndDelimiter
        ),
        StatementEnd(";")
    ),
    ExpressionStatement(
        StringQqQuoted(
            qq,
            QuoteLikeStartDelimiter,
            InterpolatedStringContent,
            ArrayAccessVariable(ScalarVariable, ArrowOperator, "[", ArithOp, Integer, "]"),
            QuoteLikeEndDelimiter
        ),
        StatementEnd(";")
    ),
    ExpressionStatement(
        StringQqQuoted(
            qq,
            QuoteLikeStartDelimiter,
            InterpolatedStringContent,
            HashAccessVariable(ScalarVariable, "{", Identifier, "}"),
            QuoteLikeEndDelimiter
        ),
        StatementEnd(";")
    ),
    ExpressionStatement(
        StringQqQuoted(
            qq,
            QuoteLikeStartDelimiter,
            InterpolatedStringContent,
            HashAccessVariable(ScalarVariable, ArrowOperator, "{", Identifier, "}"),
            InterpolatedStringContent,
            QuoteLikeEndDelimiter
        ),
        StatementEnd(";")
    ),
    ExpressionStatement(
        StringQqQuoted(
            qq,
            QuoteLikeStartDelimiter,
            InterpolatedStringContent,
            ScalarDereference(
                "$",
                "{",
                UnaryExpression(RefOp, List("(", BinaryExpression(ScalarVariable, ArithOp, Integer), ")")),
                "}"
            ),
            QuoteLikeEndDelimiter
        ),
        StatementEnd(";")
    ),
    ExpressionStatement(
        StringQqQuoted(
            qq,
            QuoteLikeStartDelimiter,
            InterpolatedStringContent,
            ArrayDereference(
                "@",
                "{",
                ArrayRef("[", BinaryExpression(StringSingleQuoted, ConcatOp, StringSingleQuoted), "]"),
                "}"
            ),
            QuoteLikeEndDelimiter
        ),
        StatementEnd(";")
    ),
    ExpressionStatement(
        StringQqQuoted(qq, QuoteLikeStartDelimiter, InterpolatedStringContent, QuoteLikeEndDelimiter),
        StatementEnd(";")
    ),
    ExpressionStatement(
        StringQqQuoted(
            qq,
            Comment,
            Comment,
            QuoteLikeStartDelimiter,
            InterpolatedStringContent,
            ScalarVariable,
            InterpolatedStringContent,
            QuoteLikeEndDelimiter
        ),
        StatementEnd(";")
    ),
    ExpressionStatement(StringQqQuoted(qq, QuoteLikeStartDelimiter, QuoteLikeEndDelimiter), StatementEnd(";"))
)

# qw lists

qw/a b c/;
qw!a b c!;
qw a b c d a;
qw(a b(c d (e f)));
qw/a b~~/c d/;
qw  # this is a comment
    # this is another comment
    (a b c);

==>

Program(
    ExpressionStatement(
        QWList(qw, QWListContent(QuoteLikeStartDelimiter, QWElement, QWElement, QWElement, QuoteLikeEndDelimiter)),
        StatementEnd(";")
    ),
    ExpressionStatement(
        QWList(qw, QWListContent(QuoteLikeStartDelimiter, QWElement, QWElement, QWElement, QuoteLikeEndDelimiter)),
        StatementEnd(";")
    ),
    ExpressionStatement(
        QWList(qw, QWListContent(QuoteLikeStartDelimiter, QWElement, QWElement, QWElement, QuoteLikeEndDelimiter)),
        StatementEnd(";")
    ),
    ExpressionStatement(
        QWList(
            qw,
            QWListContent(
                QuoteLikeStartDelimiter,
                QWElement,
                QWElement,
                QWElement,
                QWElement,
                QWElement,
                QuoteLikeEndDelimiter
            )
        ),
        StatementEnd(";")
    ),
    ExpressionStatement(
        QWList(qw, QWListContent(QuoteLikeStartDelimiter, QWElement, QWElement, QWElement, QuoteLikeEndDelimiter)),
        StatementEnd(";")
    ),
    ExpressionStatement(
        QWList(
            qw,
            Comment,
            Comment,
            QWListContent(QuoteLikeStartDelimiter, QWElement, QWElement, QWElement, QuoteLikeEndDelimiter)
        ),
        StatementEnd(";")
    )
)

# pattern matching regular expressions

m/([+-]?~~d+)/g;
m'([+-]?~~d+)'g;
m # comment
    '([+-]?~~d+)'g;
$var =~ /([+-]?~~d+)/;
$var =~ /foo/gi;
$var =~ /~~//g;
m/~~//g;
/^${var}a$/;

==>

Program(
    ExpressionStatement(
        PatternMatchM(
            m,
            QuoteLikeStartDelimiter,
            InterpolatedStringContent,
            EscapeSequence,
            InterpolatedStringContent,
            QuoteLikeEndDelimiter,
            RegexOptions
        ),
        StatementEnd(";")
    ),
    ExpressionStatement(
        PatternMatchM(m, QuoteLikeStartDelimiter, StringContent, QuoteLikeEndDelimiter, RegexOptions),
        StatementEnd(";")
    ),
    ExpressionStatement(
        PatternMatchM(m, Comment, QuoteLikeStartDelimiter, StringContent, QuoteLikeEndDelimiter, RegexOptions),
        StatementEnd(";")
    ),
    ExpressionStatement(
        BinaryExpression(
            ScalarVariable,
            BindingOp,
            PatternMatch("/", InterpolatedStringContent, EscapeSequence, InterpolatedStringContent, "/")
        ),
        StatementEnd(";")
    ),
    ExpressionStatement(
        BinaryExpression(ScalarVariable, BindingOp, PatternMatch("/", InterpolatedStringContent, "/", RegexOptions)),
        StatementEnd(";")
    ),
    ExpressionStatement(
        BinaryExpression(ScalarVariable, BindingOp, PatternMatch("/", EscapeSequence, "/", RegexOptions)),
        StatementEnd(";")
    ),
    ExpressionStatement(
        PatternMatchM(m, QuoteLikeStartDelimiter, EscapeSequence, QuoteLikeEndDelimiter, RegexOptions),
        StatementEnd(";")
    ),
    ExpressionStatement(
        PatternMatch("/", InterpolatedStringContent, ScalarVariable, InterpolatedStringContent, "/"),
        StatementEnd(";")
    )
)

# qr regular expressions

qr/foo/i;
qr'foo'i;
qr # comment
    'foo'i;

==>

Program(
    ExpressionStatement(
        RegexQr(qr, QuoteLikeStartDelimiter, InterpolatedStringContent, QuoteLikeEndDelimiter, RegexOptions),
        StatementEnd(";")
    ),
    ExpressionStatement(
        RegexQr(qr, QuoteLikeStartDelimiter, StringContent, QuoteLikeEndDelimiter, RegexOptions),
        StatementEnd(";")
    ),
    ExpressionStatement(
        RegexQr(qr, Comment, QuoteLikeStartDelimiter, StringContent, QuoteLikeEndDelimiter, RegexOptions),
        StatementEnd(";")
    )
)

# substitution regular expressions

s/foo$var~~n/frog~~n/;
s#hello#bye#r;
s'foo$var'frog';
s{a{b}}{ab}r;
s # comment at beginning end of line
    # comment at beginning on next line
    {hello} # comment at middle end of line
    # comment at middle on next line
    {bye}r;

==>

Program(
    ExpressionStatement(
        SubstitutionS(
            s,
            QuoteLikeStartDelimiter,
            InterpolatedStringContent,
            ScalarVariable,
            EscapeSequence,
            QuoteLikeSeparatorDelimiter,
            InterpolatedStringContent,
            EscapeSequence,
            QuoteLikeEndDelimiter
        ),
        StatementEnd(";")
    ),
    ExpressionStatement(
        SubstitutionS(
            s,
            QuoteLikeStartDelimiter,
            InterpolatedStringContent,
            QuoteLikeSeparatorDelimiter,
            InterpolatedStringContent,
            QuoteLikeEndDelimiter,
            RegexOptions
        ),
        StatementEnd(";")
    ),
    ExpressionStatement(
        SubstitutionS(
            s,
            QuoteLikeStartDelimiter,
            StringContent,
            QuoteLikeSeparatorDelimiter,
            StringContent,
            QuoteLikeEndDelimiter
        ),
        StatementEnd(";")
    ),
    ExpressionStatement(
        SubstitutionS(
            s,
            QuoteLikeStartDelimiter,
            InterpolatedStringContent,
            QuoteLikeEndDelimiter,
            QuoteLikeStartDelimiter,
            InterpolatedStringContent,
            QuoteLikeEndDelimiter,
            RegexOptions
        ),
        StatementEnd(";")
    ),
    ExpressionStatement(
        SubstitutionS(
            s,
            Comment,
            Comment,
            QuoteLikeStartDelimiter,
            InterpolatedStringContent,
            QuoteLikeEndDelimiter,
            Comment,
            Comment,
            QuoteLikeStartDelimiter,
            InterpolatedStringContent,
            QuoteLikeEndDelimiter,
            RegexOptions
        ),
        StatementEnd(";")
    )
)

# transliterations

tr/a/b/;
y/a/b/;
tr # comment at beginning end of line
    # comment at beginning on next line
    {a} # comment at middle end of line
    # comment at middle on next line
    {b}cdsr;

y # comment at beginning end of line
    # comment at beginning on next line
    {a} # comment at middle end of line
    # comment at middle on next line
    {b}cdsr;

==>

Program(
    ExpressionStatement(
        TransliterationTrOrY(
            tr,
            QuoteLikeStartDelimiter,
            StringContent,
            QuoteLikeSeparatorDelimiter,
            StringContent,
            QuoteLikeEndDelimiter
        ),
        StatementEnd(";")
    ),
    ExpressionStatement(
        TransliterationTrOrY(
            y,
            QuoteLikeStartDelimiter,
            StringContent,
            QuoteLikeSeparatorDelimiter,
            StringContent,
            QuoteLikeEndDelimiter
        ),
        StatementEnd(";")
    ),
    ExpressionStatement(
        TransliterationTrOrY(
            tr,
            Comment,
            Comment,
            QuoteLikeStartDelimiter,
            StringContent,
            QuoteLikeEndDelimiter,
            Comment,
            Comment,
            QuoteLikeStartDelimiter,
            StringContent,
            QuoteLikeEndDelimiter,
            RegexOptions
        ),
        StatementEnd(";")
    ),
    ExpressionStatement(
        TransliterationTrOrY(
            y,
            Comment,
            Comment,
            QuoteLikeStartDelimiter,
            StringContent,
            QuoteLikeEndDelimiter,
            Comment,
            Comment,
            QuoteLikeStartDelimiter,
            StringContent,
            QuoteLikeEndDelimiter,
            RegexOptions
        ),
        StatementEnd(";")
    )
)

# interpolation of special scalar variables

qq(
    $"
    $$
    $0
    $1
    $2
    $<
    $>
    $;
    $]
    $^F
    $&
    $`
    $'
    $+
    @+
    @-
    ${^MATCH}
    $,
    $.
    $|
);

==>

Program(
    ExpressionStatement(
        StringQqQuoted(
            qq,
            QuoteLikeStartDelimiter,
            InterpolatedStringContent,
            SpecialScalarVariable,
            InterpolatedStringContent,
            SpecialScalarVariable,
            InterpolatedStringContent,
            SpecialScalarVariable,
            InterpolatedStringContent,
            SpecialScalarVariable,
            InterpolatedStringContent,
            SpecialScalarVariable,
            InterpolatedStringContent,
            SpecialScalarVariable,
            InterpolatedStringContent,
            SpecialScalarVariable,
            InterpolatedStringContent,
            SpecialScalarVariable,
            InterpolatedStringContent,
            SpecialScalarVariable,
            InterpolatedStringContent,
            SpecialScalarVariable,
            InterpolatedStringContent,
            SpecialScalarVariable,
            InterpolatedStringContent,
            SpecialScalarVariable,
            InterpolatedStringContent,
            SpecialScalarVariable,
            InterpolatedStringContent,
            ArrayVariable,
            InterpolatedStringContent,
            ArrayVariable,
            InterpolatedStringContent,
            SpecialScalarVariable,
            InterpolatedStringContent,
            SpecialScalarVariable,
            InterpolatedStringContent,
            SpecialScalarVariable,
            InterpolatedStringContent,
            QuoteLikeEndDelimiter
        ),
        StatementEnd(";")
    )
)
