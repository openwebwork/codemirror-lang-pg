# bold text

BEGIN_PGML
The following is *bold text with math [`x + 3`]*

The following is bold with too many delimiters ***bold text****
END_PGML

==>

{
    "name": "Program",
    "from": 0,
    "to": 133,
    "children": [
        {
            "name": "PGMLBlock",
            "from": 0,
            "to": 133,
            "children": [
                { "name": "BeginPG", "from": 0, "to": 10 },
                {
                    "name": "PGMLContent",
                    "from": 10,
                    "to": 125,
                    "children": [
                        {
                            "name": "Paragraph",
                            "from": 10,
                            "to": 59,
                            "children": [
                                {
                                    "name": "StrongEmphasis",
                                    "from": 28,
                                    "to": 59,
                                    "children": [
                                        { "name": "EmphasisMark", "from": 28, "to": 29 },
                                        {
                                            "name": "MathMode",
                                            "from": 49,
                                            "to": 58,
                                            "children": [
                                                { "name": "MathModeMark", "from": 49, "to": 51 },
                                                { "name": "MathModeMark", "from": 56, "to": 58 }
                                            ]
                                        },
                                        { "name": "EmphasisMark", "from": 58, "to": 59 }
                                    ]
                                }
                            ]
                        },
                        {
                            "name": "Paragraph",
                            "from": 61,
                            "to": 124,
                            "children": [
                                {
                                    "name": "StrongEmphasis",
                                    "from": 108,
                                    "to": 123,
                                    "children": [
                                        { "name": "EmphasisMark", "from": 108, "to": 111 },
                                        { "name": "EmphasisMark", "from": 120, "to": 123 }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                { "name": "EndPG", "from": 125, "to": 133 }
            ]
        }
    ]
}

==>

from: '0'
parseAll: 'true'
to: '114'
type: 'root'
stack: [
  [ # 0
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '0'
    indent: '0'
    to: '48'
    type: 'indent'
    stack: [
      [ # 0
        combine: { text: 'type' }
        from: '0'
        to: '17'
        type: 'text'
        stack: ['The following is ']
      ]
      [ # 1
        from: '17'
        to: '48'
        token: '*'
        type: 'bold'
        stack: [
          [ # 0
            combine: { text: 'type' }
            from: '18'
            to: '38'
            type: 'text'
            stack: ['bold text with math ']
          ]
          [ # 1
            children: [
              {
                combine: { text: 'type' }
                from: '40'
                to: '45'
                type: 'text'
                stack: ['x + 3']
              }
            ]
            from: '38'
            terminator: '`]'
            to: '47'
            token: '[`'
            type: 'math'
          ]
        ]
      ]
    ]
  ]
  [ # 1
    from: '48'
    noIndent: '1'
    to: '50'
    token: '\n\n'
    type: 'par'
  ]
  [ # 2
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '50'
    indent: '0'
    to: '113'
    type: 'indent'
    stack: [
      [ # 0
        combine: { text: 'type' }
        from: '50'
        to: '97'
        type: 'text'
        stack: ['The following is bold with too many delimiters ']
      ]
      [ # 1
        from: '97'
        to: '112'
        token: '***'
        type: 'bold'
        stack: [
          [ # 0
            combine: { text: 'type' }
            from: '100'
            to: '109'
            type: 'text'
            stack: ['bold text']
          ]
        ]
      ]
      [ # 2
        combine: { text: 'type' }
        from: '112'
        to: '113'
        type: 'text'
        stack: ['\n']
      ]
    ]
  ]
]

# italic text

BEGIN_PGML
The following is _italic text_

The following is poor taste ____italic text___
END_PGML

==>

{
    "name": "Program",
    "from": 0,
    "to": 98,
    "children": [
        {
            "name": "PGMLBlock",
            "from": 0,
            "to": 98,
            "children": [
                { "name": "BeginPG", "from": 0, "to": 10 },
                {
                    "name": "PGMLContent",
                    "from": 10,
                    "to": 91,
                    "children": [
                        {
                            "name": "Paragraph",
                            "from": 10,
                            "to": 41,
                            "children": [
                                {
                                    "name": "Emphasis",
                                    "from": 28,
                                    "to": 41,
                                    "children": [
                                        { "name": "EmphasisMark", "from": 28, "to": 29 },
                                        { "name": "EmphasisMark", "from": 40, "to": 41 }
                                    ]
                                }
                            ]
                        },
                        {
                            "name": "Paragraph",
                            "from": 43,
                            "to": 91,
                            "children": [
                                {
                                    "name": "Emphasis",
                                    "from": 71,
                                    "to": 90,
                                    "children": [
                                        { "name": "EmphasisMark", "from": 71, "to": 75 },
                                        { "name": "EmphasisMark", "from": 86, "to": 90 }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                { "name": "EndPG", "from": 90, "to": 98 }
            ]
        }
    ]
}

==>

from: '0'
parseAll: 'true'
to: '79'
type: 'root'
stack: [
  [ # 0
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '0'
    indent: '0'
    to: '30'
    type: 'indent'
    stack: [
      [ # 0
        combine: { text: 'type' }
        from: '0'
        to: '17'
        type: 'text'
        stack: ['The following is ']
      ]
      [ # 1
        from: '17'
        to: '30'
        token: '_'
        type: 'italic'
        stack: [
          [ # 0
            combine: { text: 'type' }
            from: '18'
            to: '29'
            type: 'text'
            stack: ['italic text']
          ]
        ]
      ]
    ]
  ]
  [ # 1
    from: '30'
    noIndent: '1'
    to: '32'
    token: '\n\n'
    type: 'par'
  ]
  [ # 2
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '32'
    indent: '0'
    to: '80'
    type: 'indent'
    stack: [
      [ # 0
        combine: { text: 'type' }
        from: '32'
        to: '60'
        type: 'text'
        stack: ['The following is poor taste ']
      ]
      [ # 1
        from: '60'
        to: '79'
        token: '____'
        type: 'italic'
        stack: [
          [ # 0
            combine: { text: 'type' }
            from: '64'
            to: '75'
            type: 'text'
            stack: ['italic text']
          ]
        ]
      ]
      [ # 2
        combine: { text: 'type' }
        from: '79'
        to: '80'
        type: 'text'
        stack: ['\n']
      ]
    ]
  ]
]

# bold italic text

BEGIN_PGML
*_bold italic text_*
END_PGML

==>

{
    "name": "Program",
    "from": 0,
    "to": 40,
    "children": [
        {
            "name": "PGMLBlock",
            "from": 0,
            "to": 40,
            "children": [
                { "name": "BeginPG", "from": 0, "to": 10 },
                {
                    "name": "PGMLContent",
                    "from": 10,
                    "to": 32,
                    "children": [
                        {
                            "name": "Paragraph",
                            "from": 10,
                            "to": 32,
                            "children": [
                                {
                                    "name": "StrongEmphasis",
                                    "from": 11,
                                    "to": 31,
                                    "children": [
                                        { "name": "EmphasisMark", "from": 11, "to": 12 },
                                        {
                                            "name": "Emphasis",
                                            "from": 12,
                                            "to": 30,
                                            "children": [
                                                { "name": "EmphasisMark", "from": 12, "to": 13 },
                                                { "name": "EmphasisMark", "from": 29, "to": 30 }
                                            ]
                                        },
                                        { "name": "EmphasisMark", "from": 30, "to": 31 }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                { "name": "EndPG", "from": 32, "to": 40 }
            ]
        }
    ]
}

==>

from: '0'
parseAll: 'true'
to: '21'
type: 'root'
stack: [
  [ # 0
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '0'
    indent: '0'
    to: '21'
    type: 'indent'
    stack: [
      [ # 0
        from: '0'
        to: '20'
        token: '*'
        type: 'bold'
        stack: [
          [ # 0
            from: '1'
            to: '19'
            token: '_'
            type: 'italic'
            stack: [
              [ # 0
                combine: { text: 'type' }
                from: '2'
                to: '18'
                type: 'text'
                stack: ['bold italic text']
              ]
            ]
          ]
        ]
      ]
      [ # 1
        combine: { text: 'type' }
        from: '20'
        to: '21'
        type: 'text'
        stack: ['\n']
      ]
    ]
  ]
]

# horizontal rules

BEGIN_PGML
first
---
second
===
third
----{200}
===={'50%'}
----{'3in'}{5}
===={ height => 5 }
END_PGML

==>

{
    "name": "Program",
    "from": 0,
    "to": 103,
    "children": [
        {
            "name": "PGMLBlock",
            "from": 0,
            "to": 103,
            "children": [
                { "name": "BeginPG", "from": 0, "to": 10 },
                {
                    "name": "PGMLContent",
                    "from": 10,
                    "to": 95,
                    "children": [
                        {
                            "name": "Paragraph",
                            "from": 10,
                            "to": 95,
                            "children": [
                                { "name": "HorizontalRule", "from": 17, "to": 20 },
                                { "name": "HorizontalRule", "from": 28, "to": 31 },
                                { "name": "HorizontalRule", "from": 38, "to": 42 },
                                {
                                    "name": "Option",
                                    "from": 42,
                                    "to": 47,
                                    "children": [
                                        { "name": "OptionMark", "from": 42, "to": 43 },
                                        {
                                            "name": "Program",
                                            "from": 43,
                                            "to": 46,
                                            "children": [
                                                {
                                                    "name": "ExpressionStatement",
                                                    "from": 43,
                                                    "to": 46,
                                                    "children": [
                                                        { "name": "Integer", "from": 43, "to": 46 }
                                                    ]
                                                }
                                            ]
                                        },
                                        { "name": "OptionMark", "from": 46, "to": 47 }
                                    ]
                                },
                                { "name": "HorizontalRule", "from": 48, "to": 52 },
                                {
                                    "name": "Option",
                                    "from": 52,
                                    "to": 59,
                                    "children": [
                                        { "name": "OptionMark", "from": 52, "to": 53 },
                                        {
                                            "name": "Program",
                                            "from": 53,
                                            "to": 58,
                                            "children": [
                                                {
                                                    "name": "ExpressionStatement",
                                                    "from": 53,
                                                    "to": 58,
                                                    "children": [
                                                        { "name": "StringSingleQuoted", "from": 53, "to": 58 }
                                                    ]
                                                }
                                            ]
                                        },
                                        { "name": "OptionMark", "from": 58, "to": 59 }
                                    ]
                                },
                                { "name": "HorizontalRule", "from": 60, "to": 64 },
                                {
                                    "name": "Option",
                                    "from": 64,
                                    "to": 71,
                                    "children": [
                                        { "name": "OptionMark", "from": 64, "to": 65 },
                                        {
                                            "name": "Program",
                                            "from": 65,
                                            "to": 70,
                                            "children": [
                                                {
                                                    "name": "ExpressionStatement",
                                                    "from": 65,
                                                    "to": 70,
                                                    "children": [
                                                        { "name": "StringSingleQuoted", "from": 65, "to": 70 }
                                                    ]
                                                }
                                            ]
                                        },
                                        { "name": "OptionMark", "from": 70, "to": 71 }
                                    ]
                                },
                                {
                                    "name": "Option",
                                    "from": 71,
                                    "to": 74,
                                    "children": [
                                        { "name": "OptionMark", "from": 71, "to": 72 },
                                        {
                                            "name": "Program",
                                            "from": 72,
                                            "to": 73,
                                            "children": [
                                                {
                                                    "name": "ExpressionStatement",
                                                    "from": 72,
                                                    "to": 73,
                                                    "children": [
                                                        { "name": "Integer", "from": 72, "to": 73 }
                                                    ]
                                                }
                                            ]
                                        },
                                        { "name": "OptionMark", "from": 73, "to": 74 }
                                    ]
                                },
                                { "name": "HorizontalRule", "from": 75, "to": 79 },
                                {
                                    "name": "Option",
                                    "from": 79,
                                    "to": 94,
                                    "children": [
                                        { "name": "OptionMark", "from": 79, "to": 80 },
                                        {
                                            "name": "Program",
                                            "from": 80,
                                            "to": 93,
                                            "children": [
                                                {
                                                    "name": "ExpressionStatement",
                                                    "from": 81,
                                                    "to": 92,
                                                    "children": [
                                                        {
                                                            "name": "Pair",
                                                            "from": 81,
                                                            "to": 92,
                                                            "children": [
                                                                { "name": "Identifier", "from": 81, "to": 87 },
                                                                { "name": "FatComma", "from": 88, "to": 90 },
                                                                { "name": "Integer", "from": 91, "to": 92 }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        { "name": "OptionMark", "from": 93, "to": 94 }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                { "name": "EndPG", "from": 95, "to": 103 }
            ]
        }
    ]
}

==>

from: '0'
parseAll: 'true'
to: '84'
type: 'root'
stack: [
  [ # 0
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '0'
    indent: '0'
    to: '84'
    type: 'indent'
    stack: [
      [ # 0
        combine: { text: 'type' }
        from: '0'
        to: '6'
        type: 'text'
        stack: ['first', '\n']
      ]
      [ # 1
        from: '6'
        options: ['width', 'height', 'size']
        to: '9'
        token: '---'
        type: 'rule'
      ]
      [ # 2
        combine: { text: 'type' }
        from: '10'
        to: '17'
        type: 'text'
        stack: ['second', '\n']
      ]
      [ # 3
        from: '17'
        options: ['width', 'height', 'size']
        to: '20'
        token: '==='
        type: 'rule'
      ]
      [ # 4
        combine: { text: 'type' }
        from: '21'
        to: '27'
        type: 'text'
        stack: ['third', '\n']
      ]
      [ # 5
        from: '27'
        optionStack: [
          {
            from: '31'
            terminator: '}'
            text: '200'
            textFrom: '32'
            to: '36'
            token: '{'
            type: 'options'
          }
        ]
        options: ['width', 'height', 'size']
        to: '36'
        token: '----'
        type: 'rule'
      ]
      [ # 6
        combine: { text: 'type' }
        from: '36'
        to: '37'
        type: 'text'
        stack: ['\n']
      ]
      [ # 7
        from: '37'
        optionStack: [
          {
            from: '41'
            terminator: '}'
            text: ''50%''
            textFrom: '42'
            to: '48'
            token: '{'
            type: 'options'
          }
        ]
        options: ['width', 'height', 'size']
        to: '48'
        token: '===='
        type: 'rule'
      ]
      [ # 8
        combine: { text: 'type' }
        from: '48'
        to: '49'
        type: 'text'
        stack: ['\n']
      ]
      [ # 9
        from: '49'
        optionStack: [
          {
            from: '53'
            terminator: '}'
            text: ''3in''
            textFrom: '54'
            to: '60'
            token: '{'
            type: 'options'
          },
          {
            from: '60'
            terminator: '}'
            text: '5'
            textFrom: '61'
            to: '63'
            token: '{'
            type: 'options'
          }
        ]
        options: ['width', 'height', 'size']
        to: '63'
        token: '----'
        type: 'rule'
      ]
      [ # 10
        combine: { text: 'type' }
        from: '63'
        to: '64'
        type: 'text'
        stack: ['\n']
      ]
      [ # 11
        from: '64'
        optionStack: [
          {
            from: '68'
            terminator: '}'
            text: ' height => 5 '
            textFrom: '69'
            to: '83'
            token: '{'
            type: 'options'
          }
        ]
        options: ['width', 'height', 'size']
        to: '83'
        token: '===='
        type: 'rule'
      ]
      [ # 12
        combine: { text: 'type' }
        from: '83'
        to: '84'
        type: 'text'
        stack: ['\n']
      ]
    ]
  ]
]

# alignment

BEGIN_PGML
>> right justified text [`y = 2x + 3`]
>> centered text [`x = 4`] <<
>> ---{100} <<
>> ----{100}
END_PGML

==>

{
    "name": "Program",
    "from": 0,
    "to": 116,
    "children": [
        {
            "name": "PGMLBlock",
            "from": 0,
            "to": 116,
            "children": [
                { "name": "BeginPG", "from": 0, "to": 10 },
                {
                    "name": "PGMLContent",
                    "from": 10,
                    "to": 108,
                    "children": [
                        {
                            "name": "Align",
                            "from": 11,
                            "to": 50,
                            "children": [
                                { "name": "AlignMark", "from": 11, "to": 14 },
                                {
                                    "name": "MathMode",
                                    "from": 35,
                                    "to": 49,
                                    "children": [
                                        { "name": "MathModeMark", "from": 35, "to": 37 },
                                        { "name": "MathModeMark", "from": 47, "to": 49 }
                                    ]
                                }
                            ]
                        },
                        {
                            "name": "Align",
                            "from": 50,
                            "to": 79,
                            "children": [
                                { "name": "AlignMark", "from": 50, "to": 53 },
                                {
                                    "name": "MathMode",
                                    "from": 67,
                                    "to": 76,
                                    "children": [
                                        { "name": "MathModeMark", "from": 67, "to": 69 },
                                        { "name": "MathModeMark", "from": 74, "to": 76 }
                                    ]
                                },
                                { "name": "AlignMark", "from": 76, "to": 79 }
                            ]
                        },
                        {
                            "name": "Align",
                            "from": 80,
                            "to": 94,
                            "children": [
                                { "name": "AlignMark", "from": 80, "to": 83 },
                                { "name": "HorizontalRule", "from": 83, "to": 86 },
                                {
                                    "name": "Option",
                                    "from": 86,
                                    "to": 91,
                                    "children": [
                                        { "name": "OptionMark", "from": 86, "to": 87 },
                                        {
                                            "name": "Program",
                                            "from": 87,
                                            "to": 90,
                                            "children": [
                                                {
                                                    "name": "ExpressionStatement",
                                                    "from": 87,
                                                    "to": 90,
                                                    "children": [
                                                        { "name": "Integer", "from": 87, "to": 90 }
                                                    ]
                                                }
                                            ]
                                        },
                                        { "name": "OptionMark", "from": 90, "to": 91 }
                                    ]
                                },
                                { "name": "AlignMark", "from": 91, "to": 94 }
                            ]
                        },
                        {
                            "name": "Align",
                            "from": 95,
                            "to": 108,
                            "children": [
                                { "name": "AlignMark", "from": 95, "to": 98 },
                                { "name": "HorizontalRule", "from": 98, "to": 102 },
                                {
                                    "name": "Option",
                                    "from": 102,
                                    "to": 107,
                                    "children": [
                                        { "name": "OptionMark", "from": 102, "to": 103 },
                                        {
                                            "name": "Program",
                                            "from": 103,
                                            "to": 106,
                                            "children": [
                                                {
                                                    "name": "ExpressionStatement",
                                                    "from": 103,
                                                    "to": 106,
                                                    "children": [
                                                        { "name": "Integer", "from": 103, "to": 106 }
                                                    ]
                                                }
                                            ]
                                        },
                                        { "name": "OptionMark", "from": 106, "to": 107 }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                { "name": "EndPG", "from": 108, "to": 116 }
            ]
        }
    ]
}

==>

from: '0'
parseAll: 'true'
to: '97'
type: 'root'
stack: [
  [ # 0
    align: 'right'
    from: '0'
    to: '39'
    token: '>> '
    type: 'align'
    stack: [
      [ # 0
        combine: { text: 'type' }
        from: '3'
        to: '24'
        type: 'text'
        stack: ['right justified text ']
      ]
      [ # 1
        children: [
          {
            combine: { text: 'type' }
            from: '26'
            to: '36'
            type: 'text'
            stack: ['y = 2x + 3']
          }
        ]
        from: '24'
        terminator: '`]'
        to: '38'
        token: '[`'
        type: 'math'
      ]
      [ # 2
        combine: { text: 'type' }
        from: '38'
        to: '39'
        type: 'text'
        stack: ['\n']
      ]
    ]
  ]
  [ # 1
    align: 'center'
    from: '39'
    terminator: ' <<'
    to: '68'
    token: '>> '
    type: 'align'
    stack: [
      [ # 0
        combine: { text: 'type' }
        from: '42'
        to: '56'
        type: 'text'
        stack: ['centered text ']
      ]
      [ # 1
        children: [
          {
            combine: { text: 'type' }
            from: '58'
            to: '63'
            type: 'text'
            stack: ['x = 4']
          }
        ]
        from: '56'
        terminator: '`]'
        to: '65'
        token: '[`'
        type: 'math'
      ]
    ]
  ]
  [ # 2
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '68'
    indent: '0'
    to: '69'
    type: 'indent'
    stack: [
      [ # 0
        combine: { text: 'type' }
        from: '68'
        to: '69'
        type: 'text'
        stack: ['\n']
      ]
    ]
  ]
  [ # 3
    align: 'center'
    from: '69'
    terminator: ' <<'
    to: '83'
    token: '>> '
    type: 'align'
    stack: [
      [ # 0
        from: '72'
        optionStack: [
          {
            from: '75'
            terminator: '}'
            text: '100'
            textFrom: '76'
            to: '80'
            token: '{'
            type: 'options'
          }
        ]
        options: ['width', 'height', 'size']
        to: '80'
        token: '---'
        type: 'rule'
      ]
    ]
  ]
  [ # 4
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '83'
    indent: '0'
    to: '84'
    type: 'indent'
    stack: [
      [ # 0
        combine: { text: 'type' }
        from: '83'
        to: '84'
        type: 'text'
        stack: ['\n']
      ]
    ]
  ]
  [ # 5
    align: 'right'
    from: '84'
    to: '97'
    token: '>> '
    type: 'align'
    stack: [
      [ # 0
        from: '87'
        optionStack: [
          {
            from: '91'
            terminator: '}'
            text: '100'
            textFrom: '92'
            to: '96'
            token: '{'
            type: 'options'
          }
        ]
        options: ['width', 'height', 'size']
        to: '96'
        token: '----'
        type: 'rule'
      ]
      [ # 1
        combine: { text: 'type' }
        from: '96'
        to: '97'
        type: 'text'
        stack: ['\n']
      ]
    ]
  ]
]

# verbatim

BEGIN_PGML
[|This math markup [:x+1:] is not processed.|]
[||This is [|verbatim|].||]
[|verbatim content with pre|]*
END_PGML

==>

{
    "name": "Program",
    "from": 0,
    "to": 125,
    "children": [
        {
            "name": "PGMLBlock",
            "from": 0,
            "to": 125,
            "children": [
                { "name": "BeginPG", "from": 0, "to": 10 },
                {
                    "name": "PGMLContent",
                    "from": 10,
                    "to": 117,
                    "children": [
                        {
                            "name": "Paragraph",
                            "from": 10,
                            "to": 117,
                            "children": [
                                {
                                    "name": "Verbatim",
                                    "from": 11,
                                    "to": 57,
                                    "children": [
                                        { "name": "VerbatimMark", "from": 11, "to": 13 },
                                        { "name": "VerbatimMark", "from": 55, "to": 57 }
                                    ]
                                },
                                {
                                    "name": "Verbatim",
                                    "from": 58,
                                    "to": 85,
                                    "children": [
                                        { "name": "VerbatimMark", "from": 58, "to": 61 },
                                        { "name": "VerbatimMark", "from": 82, "to": 85 }
                                    ]
                                },
                                {
                                    "name": "Verbatim",
                                    "from": 86,
                                    "to": 116,
                                    "children": [
                                        { "name": "VerbatimMark", "from": 86, "to": 88 },
                                        { "name": "VerbatimMark", "from": 113, "to": 116 }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                { "name": "EndPG", "from": 117, "to": 125 }
            ]
        }
    ]
}

==>

from: '0'
parseAll: 'true'
to: '106'
type: 'root'
stack: [
  [ # 0
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '0'
    indent: '0'
    to: '106'
    type: 'indent'
    stack: [
      [ # 0
        allowStar: 'true'
        from: '0'
        terminator: '|]'
        text: 'This math markup [:x+1:] is not processed.'
        textFrom: '2'
        to: '46'
        token: '[|'
        type: 'verbatim'
      ]
      [ # 1
        combine: { text: 'type' }
        from: '46'
        to: '47'
        type: 'text'
        stack: ['\n']
      ]
      [ # 2
        allowStar: 'true'
        from: '47'
        terminator: '||]'
        text: 'This is [|verbatim|].'
        textFrom: '50'
        to: '74'
        token: '[||'
        type: 'verbatim'
      ]
      [ # 3
        combine: { text: 'type' }
        from: '74'
        to: '75'
        type: 'text'
        stack: ['\n']
      ]
      [ # 4
        allowStar: 'true'
        from: '75'
        hasStar: '1'
        terminator: '|]'
        text: 'verbatim content with pre'
        textFrom: '77'
        to: '105'
        token: '[|'
        type: 'verbatim'
      ]
      [ # 5
        combine: { text: 'type' }
        from: '105'
        to: '106'
        type: 'text'
        stack: ['\n']
      ]
    ]
  ]
]

# pre

BEGIN_PGML
:   This is preformatted,
:       and can include any text, e.g., <, >, $, etc.,
:       but [@ "commands" @], [$s], and other *markup* are performed normally.
:   Use verbatim mode like [|[@ "commands" @]|] if you want to include commands/substitutions literally,
:   or use a slash to escape them: \[$s].

    Here is some indenting
    :   with preformatting
    :   on several lines.
    Now back to normal, but indented.
END_PGML

==>

{
    "name": "Program",
    "from": 0,
    "to": 445,
    "children": [
        {
            "name": "PGMLBlock",
            "from": 0,
            "to": 445,
            "children": [
                { "name": "BeginPG", "from": 0, "to": 10 },
                {
                    "name": "PGMLContent",
                    "from": 10,
                    "to": 437,
                    "children": [
                        {
                            "name": "Pre",
                            "from": 11,
                            "to": 37,
                            "children": [
                                { "name": "PreMark", "from": 11, "to": 15 }
                            ]
                        },
                        {
                            "name": "Pre",
                            "from": 37,
                            "to": 92,
                            "children": [
                                { "name": "PreMark", "from": 37, "to": 41 }
                            ]
                        },
                        {
                            "name": "Pre",
                            "from": 92,
                            "to": 171,
                            "children": [
                                { "name": "PreMark", "from": 92, "to": 96 },
                                {
                                    "name": "PerlCommand",
                                    "from": 104,
                                    "to": 120,
                                    "children": [
                                        { "name": "PerlCommandMark", "from": 104, "to": 106 },
                                        {
                                            "name": "Program",
                                            "from": 106,
                                            "to": 118,
                                            "children": [
                                                {
                                                    "name": "ExpressionStatement",
                                                    "from": 107,
                                                    "to": 117,
                                                    "children": [
                                                        {
                                                            "name": "StringDoubleQuoted",
                                                            "from": 107,
                                                            "to": 117,
                                                            "children": [
                                                                { "name": "InterpolatedStringContent", "from": 108, "to": 116 }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        { "name": "PerlCommandMark", "from": 118, "to": 120 }
                                    ]
                                },
                                {
                                    "name": "Variable",
                                    "from": 122,
                                    "to": 126,
                                    "children": [
                                        { "name": "VariableMark", "from": 122, "to": 123 },
                                        {
                                            "name": "Program",
                                            "from": 123,
                                            "to": 125,
                                            "children": [
                                                {
                                                    "name": "ExpressionStatement",
                                                    "from": 123,
                                                    "to": 125,
                                                    "children": [
                                                        { "name": "ScalarVariable", "from": 123, "to": 125 }
                                                    ]
                                                }
                                            ]
                                        },
                                        { "name": "VariableMark", "from": 125, "to": 126 }
                                    ]
                                },
                                {
                                    "name": "StrongEmphasis",
                                    "from": 138,
                                    "to": 146,
                                    "children": [
                                        { "name": "EmphasisMark", "from": 138, "to": 139 },
                                        { "name": "EmphasisMark", "from": 145, "to": 146 }
                                    ]
                                }
                            ]
                        },
                        {
                            "name": "Pre",
                            "from": 171,
                            "to": 276,
                            "children": [
                                { "name": "PreMark", "from": 171, "to": 175 },
                                {
                                    "name": "Verbatim",
                                    "from": 198,
                                    "to": 218,
                                    "children": [
                                        { "name": "VerbatimMark", "from": 198, "to": 200 },
                                        { "name": "VerbatimMark", "from": 216, "to": 218 }
                                    ]
                                }
                            ]
                        },
                        {
                            "name": "Pre",
                            "from": 276,
                            "to": 317,
                            "children": [
                                { "name": "PreMark", "from": 276, "to": 280 },
                                { "name": "EscapeSequence", "from": 311, "to": 313 }
                            ]
                        },
                        {
                            "name": "Paragraph",
                            "from": 323,
                            "to": 437,
                            "children": [
                                {
                                    "name": "Pre",
                                    "from": 350,
                                    "to": 373,
                                    "children": [
                                        { "name": "PreMark", "from": 350, "to": 354 }
                                    ]
                                },
                                {
                                    "name": "Pre",
                                    "from": 377,
                                    "to": 399,
                                    "children": [
                                        { "name": "PreMark", "from": 377, "to": 381 }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                { "name": "EndPG", "from": 437, "to": 445 }
            ]
        }
    ]
}

==>

from: '0'
parseAll: 'true'
to: '426'
type: 'root'
stack: [
  [ # 0
    from: '0'
    terminator: ''
    to: '26'
    token: ':   '
    type: 'pre'
    stack: [
      [ # 0
        combine: { text: 'type' }
        from: '4'
        to: '26'
        type: 'text'
        stack: ['This is preformatted,', '\n']
      ]
    ]
  ]
  [ # 1
    from: '26'
    terminator: ''
    to: '81'
    token: ':   '
    type: 'pre'
    stack: [
      [ # 0
        combine: { text: 'type' }
        from: '30'
        to: '81'
        type: 'text'
        stack: ['    and can include any text, e.g., <, >, $, etc.,', '\n']
      ]
    ]
  ]
  [ # 2
    from: '81'
    terminator: ''
    to: '160'
    token: ':   '
    type: 'pre'
    stack: [
      [ # 0
        combine: { text: 'type' }
        from: '85'
        to: '93'
        type: 'text'
        stack: ['    but ']
      ]
      [ # 1
        allowDblStar: 'true'
        allowStar: 'true'
        allowTriStar: 'true'
        from: '93'
        parseQuoted: 'true'
        terminator: '@]'
        text: ' "commands" '
        textFrom: '95'
        to: '109'
        token: '[@'
        type: 'command'
      ]
      [ # 2
        combine: { text: 'type' }
        from: '109'
        to: '111'
        type: 'text'
        stack: [', ']
      ]
      [ # 3
        allowDblStar: 'true'
        allowStar: 'true'
        allowTriStar: 'true'
        from: '111'
        terminator: ']'
        text: 's'
        textFrom: '113'
        to: '115'
        token: '[$'
        type: 'variable'
      ]
      [ # 4
        combine: { text: 'type' }
        from: '115'
        to: '127'
        type: 'text'
        stack: [', and other ']
      ]
      [ # 5
        from: '127'
        to: '135'
        token: '*'
        type: 'bold'
        stack: [
          [ # 0
            combine: { text: 'type' }
            from: '128'
            to: '134'
            type: 'text'
            stack: ['markup']
          ]
        ]
      ]
      [ # 6
        combine: { text: 'type' }
        from: '135'
        to: '160'
        type: 'text'
        stack: [' are performed normally.', '\n']
      ]
    ]
  ]
  [ # 3
    from: '160'
    terminator: ''
    to: '265'
    token: ':   '
    type: 'pre'
    stack: [
      [ # 0
        combine: { text: 'type' }
        from: '164'
        to: '187'
        type: 'text'
        stack: ['Use verbatim mode like ']
      ]
      [ # 1
        allowStar: 'true'
        from: '187'
        terminator: '|]'
        text: '[@ "commands" @]'
        textFrom: '189'
        to: '207'
        token: '[|'
        type: 'verbatim'
      ]
      [ # 2
        combine: { text: 'type' }
        from: '207'
        to: '265'
        type: 'text'
        stack: [' if you want to include commands/substitutions literally,', '\n']
      ]
    ]
  ]
  [ # 4
    from: '265'
    terminator: ''
    to: '306'
    token: ':   '
    type: 'pre'
    stack: [
      [ # 0
        combine: { text: 'type' }
        from: '269'
        to: '300'
        type: 'text'
        stack: ['or use a slash to escape them: ']
      ]
      [ # 1
        from: '300'
        to: '302'
        token: '\['
        type: 'slash'
      ]
      [ # 2
        combine: { text: 'type' }
        from: '302'
        to: '306'
        type: 'text'
        stack: ['$s', ']', '.']
      ]
    ]
  ]
  [ # 5
    from: '306'
    noIndent: '1'
    to: '308'
    token: '\n\n'
    type: 'par'
  ]
  [ # 6
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '312'
    indent: '1'
    to: '426'
    type: 'indent'
    stack: [
      [ # 0
        combine: { text: 'type' }
        from: '312'
        to: '339'
        type: 'text'
        stack: ['Here is some indenting', '\n']
      ]
      [ # 1
        from: '339'
        terminator: ''
        to: '362'
        token: ':   '
        type: 'pre'
        stack: [
          [ # 0
            combine: { text: 'type' }
            from: '343'
            to: '362'
            type: 'text'
            stack: ['with preformatting', '\n']
          ]
        ]
      ]
      [ # 2
        from: '366'
        terminator: ''
        to: '388'
        token: ':   '
        type: 'pre'
        stack: [
          [ # 0
            combine: { text: 'type' }
            from: '370'
            to: '388'
            type: 'text'
            stack: ['on several lines.', '\n']
          ]
        ]
      ]
      [ # 3
        combine: { text: 'type' }
        from: '392'
        to: '426'
        type: 'text'
        stack: ['Now back to normal, but indented.', '\n']
      ]
    ]
  ]
]

# escape sequences

BEGIN_PGML
\"dumb quotes\"
\[$not variable]
END_PGML

==>

{
    "name": "Program",
    "from": 0,
    "to": 52,
    "children": [
        {
            "name": "PGMLBlock",
            "from": 0,
            "to": 52,
            "children": [
                { "name": "BeginPG", "from": 0, "to": 10 },
                {
                    "name": "PGMLContent",
                    "from": 10,
                    "to": 44,
                    "children": [
                        {
                            "name": "Paragraph",
                            "from": 10,
                            "to": 44,
                            "children": [
                                { "name": "EscapeSequence", "from": 11, "to": 13 },
                                { "name": "EscapeSequence", "from": 24, "to": 26 },
                                { "name": "EscapeSequence", "from": 27, "to": 29 }
                            ]
                        }
                    ]
                },
                { "name": "EndPG", "from": 44, "to": 52 }
            ]
        }
    ]
}

==>

from: '0'
parseAll: 'true'
to: '33'
type: 'root'
stack: [
  [ # 0
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '0'
    indent: '0'
    to: '33'
    type: 'indent'
    stack: [
      [ # 0
        from: '0'
        to: '2'
        token: '\"'
        type: 'slash'
      ]
      [ # 1
        combine: { text: 'type' }
        from: '2'
        to: '13'
        type: 'text'
        stack: ['dumb quotes']
      ]
      [ # 2
        from: '13'
        to: '15'
        token: '\"'
        type: 'slash'
      ]
      [ # 3
        combine: { text: 'type' }
        from: '15'
        to: '16'
        type: 'text'
        stack: ['\n']
      ]
      [ # 4
        from: '16'
        to: '18'
        token: '\['
        type: 'slash'
      ]
      [ # 5
        combine: { text: 'type' }
        from: '18'
        to: '33'
        type: 'text'
        stack: ['$not variable', ']', '\n']
      ]
    ]
  ]
]
