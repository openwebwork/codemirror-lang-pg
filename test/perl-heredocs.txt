# single quoted tag

my $m = << 'END';
basic text content
END

==>

Program(
    ExpressionStatement(
        Assignment(VariableDeclaration(my, ScalarVariable), "=", HeredocInitializer("<<", HeredocStartIdentifier)),
        StatementEnd(";", UninterpolatedHeredocBody(StringContent, HeredocEndIdentifier))
    )
)

# doubled quoted tag

my $m = << "END";
deref hash access: $var->{b} $var2->{a}{b} $var3->{a}->{b}
dereferenced scalar reference ${~~($a + 2)}
dereferenced arary reference @{['a' . 'b']}
interpolated package variable $Foo::Package::var
END

==>

Program(
    ExpressionStatement(
        Assignment(VariableDeclaration(my, ScalarVariable), "=", HeredocInitializer("<<", HeredocStartIdentifier)),
        StatementEnd(
            ";",
            InterpolatedHeredocBody(
                InterpolatedStringContent,
                HashAccessVariable(ScalarVariable, ArrowOperator, "{", Identifier, "}"),
                InterpolatedStringContent,
                HashAccessVariable(
                    HashAccessVariable(ScalarVariable, ArrowOperator, "{", Identifier, "}"),
                    "{",
                    Identifier,
                    "}"
                ),
                InterpolatedStringContent,
                HashAccessVariable(
                    HashAccessVariable(ScalarVariable, ArrowOperator, "{", Identifier, "}"),
                    ArrowOperator,
                    "{",
                    Identifier,
                    "}"
                ),
                InterpolatedStringContent,
                ScalarDereference(
                    "$",
                    "{",
                    UnaryExpression(RefOp, List("(", BinaryExpression(ScalarVariable, ArithOp, Integer), ")")),
                    "}"
                ),
                InterpolatedStringContent,
                ArrayDereference(
                    "@",
                    "{",
                    ArrayRef("[", BinaryExpression(StringSingleQuoted, ConcatOp, StringSingleQuoted), "]"),
                    "}"
                ),
                InterpolatedStringContent,
                PackageVariable(PackageName(ScalarVariable, "::", Identifier), "::", PackageVariableName(Identifier)),
                InterpolatedStringContent,
                HeredocEndIdentifier
            )
        )
    )
)

# unquoted tag

my $m = <<END;
variable: $var
array access: $a[1]
deref array access: $a->[1] $a->[-1] $b->[1][1] $c->[1]->[1]
hash access: $var{b}
END

==>

Program(
    ExpressionStatement(
        Assignment(VariableDeclaration(my, ScalarVariable), "=", HeredocInitializer("<<", HeredocStartIdentifier)),
        StatementEnd(
            ";",
            InterpolatedHeredocBody(
                InterpolatedStringContent,
                ScalarVariable,
                InterpolatedStringContent,
                ArrayAccessVariable(ScalarVariable, "[", Integer, "]"),
                InterpolatedStringContent,
                ArrayAccessVariable(ScalarVariable, ArrowOperator, "[", Integer, "]"),
                InterpolatedStringContent,
                ArrayAccessVariable(ScalarVariable, ArrowOperator, "[", UnaryExpression(ArithOp, Integer), "]"),
                InterpolatedStringContent,
                ArrayAccessVariable(
                    ArrayAccessVariable(ScalarVariable, ArrowOperator, "[", Integer, "]"),
                    "[",
                    Integer,
                    "]"
                ),
                InterpolatedStringContent,
                ArrayAccessVariable(
                    ArrayAccessVariable(ScalarVariable, ArrowOperator, "[", Integer, "]"),
                    ArrowOperator,
                    "[",
                    Integer,
                    "]"
                ),
                InterpolatedStringContent,
                HashAccessVariable(ScalarVariable, "{", Identifier, "}"),
                InterpolatedStringContent,
                HeredocEndIdentifier
            )
        )
    )
)

# escaped tag

my $m = <<~~END;
uninterpolated content $var
END

==>

Program(
    ExpressionStatement(
        Assignment(VariableDeclaration(my, ScalarVariable), "=", HeredocInitializer("<<", HeredocStartIdentifier)),
        StatementEnd(";", UninterpolatedHeredocBody(StringContent, HeredocEndIdentifier))
    )
)

# tag with space at end consumed

my $m = << 'END';
basic text content
END 
END

my $n = << "END";
basic text content
END 
END

==>

Program(
    ExpressionStatement(
        Assignment(VariableDeclaration(my, ScalarVariable), "=", HeredocInitializer("<<", HeredocStartIdentifier)),
        StatementEnd(";", UninterpolatedHeredocBody(StringContent, HeredocEndIdentifier))
    ),
    ExpressionStatement(
        Assignment(VariableDeclaration(my, ScalarVariable), "=", HeredocInitializer("<<", HeredocStartIdentifier)),
        StatementEnd(";", InterpolatedHeredocBody(InterpolatedStringContent, HeredocEndIdentifier))
    )
)

# indented tag is consumed

my $m = << 'END';
basic text content
    END
END

my $n = <<END;
basic text content
    END
END

==>

Program(
    ExpressionStatement(
        Assignment(VariableDeclaration(my, ScalarVariable), "=", HeredocInitializer("<<", HeredocStartIdentifier)),
        StatementEnd(";", UninterpolatedHeredocBody(StringContent, HeredocEndIdentifier))
    ),
    ExpressionStatement(
        Assignment(VariableDeclaration(my, ScalarVariable), "=", HeredocInitializer("<<", HeredocStartIdentifier)),
        StatementEnd(";", InterpolatedHeredocBody(InterpolatedStringContent, HeredocEndIdentifier))
    )
)

# indented heredoc

my $m =  <<~ 'EOF';
    this is indented
    EOF

my $N = <<~ "EOF";
    this is indented and $var is interpolated
    EOF

==>

Program(
    ExpressionStatement(
        Assignment(VariableDeclaration(my, ScalarVariable), "=", HeredocInitializer("<<", HeredocStartIdentifier)),
        StatementEnd(";", UninterpolatedHeredocBody(StringContent, HeredocEndIdentifier))
    ),
    ExpressionStatement(
        Assignment(VariableDeclaration(my, ScalarVariable), "=", HeredocInitializer("<<", HeredocStartIdentifier)),
        StatementEnd(
            ";",
            InterpolatedHeredocBody(
                InterpolatedStringContent,
                ScalarVariable,
                InterpolatedStringContent,
                HeredocEndIdentifier
            )
        )
    )
)

# multiple heredocs

my $m = << 'THIS' . << "THAT";
this text $var
THIS
that text $var
THAT

my $n = <<THIS . << 'THAT' . << "THEN";
this text $var
THIS
that text $var
THAT
then text $var
THEN

==>

Program(
    ExpressionStatement(
        Assignment(
            VariableDeclaration(my, ScalarVariable),
            "=",
            BinaryExpression(
                HeredocInitializer("<<", HeredocStartIdentifier),
                ConcatOp,
                HeredocInitializer("<<", HeredocStartIdentifier)
            )
        ),
        StatementEnd(
            ";",
            UninterpolatedHeredocBody(StringContent, HeredocEndIdentifier),
            InterpolatedHeredocBody(
                InterpolatedStringContent,
                ScalarVariable,
                InterpolatedStringContent,
                HeredocEndIdentifier
            )
        )
    ),
    ExpressionStatement(
        Assignment(
            VariableDeclaration(my, ScalarVariable),
            "=",
            BinaryExpression(
                BinaryExpression(
                    HeredocInitializer("<<", HeredocStartIdentifier),
                    ConcatOp,
                    HeredocInitializer("<<", HeredocStartIdentifier)
                ),
                ConcatOp,
                HeredocInitializer("<<", HeredocStartIdentifier)
            )
        ),
        StatementEnd(
            ";",
            InterpolatedHeredocBody(
                InterpolatedStringContent,
                ScalarVariable,
                InterpolatedStringContent,
                HeredocEndIdentifier
            ),
            UninterpolatedHeredocBody(StringContent, HeredocEndIdentifier),
            InterpolatedHeredocBody(
                InterpolatedStringContent,
                ScalarVariable,
                InterpolatedStringContent,
                HeredocEndIdentifier
            )
        )
    )
)

# heredocs with quote like operator mixed in

my $m = << 'END' . q{quote-like content};
heredoc content
END

my $n = << "THIS" . qq!middle quote like! . << 'THAT';
this text $var
THIS
that text $var
THAT

==>

Program(
    ExpressionStatement(
        Assignment(
            VariableDeclaration(my, ScalarVariable),
            "=",
            BinaryExpression(
                HeredocInitializer("<<", HeredocStartIdentifier),
                ConcatOp,
                StringQQuoted(q, QuoteLikeStartDelimiter, StringContent, QuoteLikeEndDelimiter)
            )
        ),
        StatementEnd(";", UninterpolatedHeredocBody(StringContent, HeredocEndIdentifier))
    ),
    ExpressionStatement(
        Assignment(
            VariableDeclaration(my, ScalarVariable),
            "=",
            BinaryExpression(
                BinaryExpression(
                    HeredocInitializer("<<", HeredocStartIdentifier),
                    ConcatOp,
                    StringQqQuoted(qq, QuoteLikeStartDelimiter, InterpolatedStringContent, QuoteLikeEndDelimiter)
                ),
                ConcatOp,
                HeredocInitializer("<<", HeredocStartIdentifier)
            )
        ),
        StatementEnd(
            ";",
            InterpolatedHeredocBody(
                InterpolatedStringContent,
                ScalarVariable,
                InterpolatedStringContent,
                HeredocEndIdentifier
            ),
            UninterpolatedHeredocBody(StringContent, HeredocEndIdentifier)
        )
    )
)

# quote like operator containing dereferenced quantities with heredoc starts

my $m = qq{before @{[ << 'INNER1' ]}middle ${~~( <<INNER2 )}after};
inside interpolated array deref $var
INNER1
inside interpolated scalar deref $var2
INNER2

==>

Program(
    ExpressionStatement(
        Assignment(
            VariableDeclaration(my, ScalarVariable),
            "=",
            StringQqQuoted(
                qq,
                QuoteLikeStartDelimiter,
                InterpolatedStringContent,
                ArrayDereference("@", "{", ArrayRef("[", HeredocInitializer("<<", HeredocStartIdentifier), "]"), "}"),
                InterpolatedStringContent,
                ScalarDereference(
                    "$",
                    "{",
                    UnaryExpression(RefOp, List("(", HeredocInitializer("<<", HeredocStartIdentifier), ")")),
                    "}"
                ),
                InterpolatedStringContent,
                QuoteLikeEndDelimiter
            )
        ),
        StatementEnd(
            ";",
            UninterpolatedHeredocBody(StringContent, HeredocEndIdentifier),
            InterpolatedHeredocBody(
                InterpolatedStringContent,
                ScalarVariable,
                InterpolatedStringContent,
                HeredocEndIdentifier
            )
        )
    )
)

# interpolated heredoc with body containing dereferenced quantity that starts another heredoc

my $m = << "END";
@{[ << "INNER" ]}
inner stuff $var
INNER
outer stuff $var
END

==>

Program(
    ExpressionStatement(
        Assignment(VariableDeclaration(my, ScalarVariable), "=", HeredocInitializer("<<", HeredocStartIdentifier)),
        StatementEnd(
            ";",
            InterpolatedHeredocBody(
                ArrayDereference("@", "{", ArrayRef("[", HeredocInitializer("<<", HeredocStartIdentifier), "]"), "}"),
                InterpolatedHeredocBody(
                    InterpolatedStringContent,
                    ScalarVariable,
                    InterpolatedStringContent,
                    HeredocEndIdentifier
                ),
                InterpolatedStringContent,
                ScalarVariable,
                InterpolatedStringContent,
                HeredocEndIdentifier
            )
        )
    )
)

# interpolated heredoc with nested dereferencing and quoting

my $m = << "END";
before
@{[ qq{inside quote like ${~~("interpolate $var")} in heredoc} ]}
after
END

==>

Program(
    ExpressionStatement(
        Assignment(VariableDeclaration(my, ScalarVariable), "=", HeredocInitializer("<<", HeredocStartIdentifier)),
        StatementEnd(
            ";",
            InterpolatedHeredocBody(
                InterpolatedStringContent,
                ArrayDereference(
                    "@",
                    "{",
                    ArrayRef(
                        "[",
                        StringQqQuoted(
                            qq,
                            QuoteLikeStartDelimiter,
                            InterpolatedStringContent,
                            ScalarDereference(
                                "$",
                                "{",
                                UnaryExpression(
                                    RefOp,
                                    List("(", StringDoubleQuoted(InterpolatedStringContent, ScalarVariable), ")")
                                ),
                                "}"
                            ),
                            InterpolatedStringContent,
                            QuoteLikeEndDelimiter
                        ),
                        "]"
                    ),
                    "}"
                ),
                InterpolatedStringContent,
                HeredocEndIdentifier
            )
        )
    )
)

# end matter after heredoc end tag

my $test = << 'END_DOC'
hello
END_DOC
;

warn (<< "END"
content of heredoc
with interpolated $var
END
);

==>

Program(
    ExpressionStatement(
        Assignment(
            VariableDeclaration(my, ScalarVariable),
            "=",
            HeredocInitializer("<<", HeredocStartIdentifier),
            UninterpolatedHeredocBody(StringContent, HeredocEndIdentifier)
        ),
        StatementEnd(";")
    ),
    ExpressionStatement(
        ListOperatorExpression(
            ListOperator,
            ParenthesizedArguments(
                "(",
                HeredocInitializer("<<", HeredocStartIdentifier),
                InterpolatedHeredocBody(
                    InterpolatedStringContent,
                    ScalarVariable,
                    InterpolatedStringContent,
                    HeredocEndIdentifier
                ),
                ")"
            )
        ),
        StatementEnd(";")
    )
)

# heredoc with dereferenced array with quotelike also with dereferenced array that starts another heredoc

my $m =  << "END1";
first heredoc before
@{[ qq{quoteLike before @{[<< 'END2' ]}qouteLike after} ]}
inner heredoc content
END2
first heredoc after
END1

my $n = << "END1";
first heredoc before
@{[ qq{quoteLike before @{[<< 'END2'
inner heredoc content
END2
]}quoteLike after} ]}
first heredoc after
END1

==>

Program(
    ExpressionStatement(
        Assignment(VariableDeclaration(my, ScalarVariable), "=", HeredocInitializer("<<", HeredocStartIdentifier)),
        StatementEnd(
            ";",
            InterpolatedHeredocBody(
                InterpolatedStringContent,
                ArrayDereference(
                    "@",
                    "{",
                    ArrayRef(
                        "[",
                        StringQqQuoted(
                            qq,
                            QuoteLikeStartDelimiter,
                            InterpolatedStringContent,
                            ArrayDereference(
                                "@",
                                "{",
                                ArrayRef("[", HeredocInitializer("<<", HeredocStartIdentifier), "]"),
                                "}"
                            ),
                            InterpolatedStringContent,
                            QuoteLikeEndDelimiter
                        ),
                        "]"
                    ),
                    "}"
                ),
                UninterpolatedHeredocBody(StringContent, HeredocEndIdentifier),
                InterpolatedStringContent,
                HeredocEndIdentifier
            )
        )
    ),
    ExpressionStatement(
        Assignment(VariableDeclaration(my, ScalarVariable), "=", HeredocInitializer("<<", HeredocStartIdentifier)),
        StatementEnd(
            ";",
            InterpolatedHeredocBody(
                InterpolatedStringContent,
                ArrayDereference(
                    "@",
                    "{",
                    ArrayRef(
                        "[",
                        StringQqQuoted(
                            qq,
                            QuoteLikeStartDelimiter,
                            InterpolatedStringContent,
                            ArrayDereference(
                                "@",
                                "{",
                                ArrayRef(
                                    "[",
                                    HeredocInitializer("<<", HeredocStartIdentifier),
                                    UninterpolatedHeredocBody(StringContent, HeredocEndIdentifier),
                                    "]"
                                ),
                                "}"
                            ),
                            InterpolatedStringContent,
                            QuoteLikeEndDelimiter
                        ),
                        "]"
                    ),
                    "}"
                ),
                InterpolatedStringContent,
                HeredocEndIdentifier
            )
        )
    )
)

# heredoc started inside qq string with text after on same line and ended after body

my $m = qq{quoteLike before @{[<< 'END' ]}quoteLike after
inner heredoc content
END
};

==>

Program(
    ExpressionStatement(
        Assignment(
            VariableDeclaration(my, ScalarVariable),
            "=",
            StringQqQuoted(
                qq,
                QuoteLikeStartDelimiter,
                InterpolatedStringContent,
                ArrayDereference("@", "{", ArrayRef("[", HeredocInitializer("<<", HeredocStartIdentifier), "]"), "}"),
                InterpolatedStringContent,
                UninterpolatedHeredocBody(StringContent, HeredocEndIdentifier),
                InterpolatedStringContent,
                QuoteLikeEndDelimiter
            )
        ),
        StatementEnd(";")
    )
)
